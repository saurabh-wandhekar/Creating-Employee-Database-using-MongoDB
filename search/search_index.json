{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Requirements Installing MongoDB This tutorial installs MongoDB 4.4 Enterprise Edition. Follow these steps to install MongoDB Enterprise Edition using the apt package manager : Import the public key used by the package management system. From a terminal, issue the following command to import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.4.asc wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - The operation should respond with an OK. However, if you receive an error indicating that gnupg is not installed, you can: Install gnupg and its required libraries using the following command: sudo apt-get install gnupg Once installed, retry importing the key. Create a /etc/apt/sources.list.d/mongodb-enterprise.list file for MongoDB. The following instruction is for Ubuntu 20.04 (Focal): echo \"deb [ arch=amd64,arm64,s390x ] http://repo.mongodb.com/apt/ubuntu focal/mongodb-enterprise/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-enterprise.list The following instruction is for Ubuntu 18.04 (Bionic): echo \"deb [ arch=amd64,arm64,s390x ] http://repo.mongodb.com/apt/ubuntu bionic/mongodb-enterprise/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-enterprise.list Reload local package database. Issue the following command to reload the local package database: sudo apt-get update Install the MongoDB Enterprise packages. Issue the following command: sudo apt-get install -y mongodb-enterprise Running MongoDB Follow these steps to run MongoDB Enterprise Edition on your system. To run and manage your mongod process, you will be using your operating system's built-in init system. Start MongoDB You can start the mongod process by issuing the following command: sudo systemctl start mongod Verify that MongoDB has started successfully sudo systemctl status mongod Stop MongoDB sudo systemctl stop mongod Begin using MongoDB Start a mongo shell on the same host machine as the mongod. You can run the mongo shell without any command-line options to connect to a mongod that is running on your localhost with default port 27017: mongo Installing Pymongo The PyMongo distribution contains tools for interacting with MongoDB database from Python. From a terminal, issue the following command : pip install pymongo This command will install the latest version of pymongo.","title":"Installation Guide"},{"location":"#installation-requirements","text":"","title":"Installation Requirements"},{"location":"#installing-mongodb","text":"This tutorial installs MongoDB 4.4 Enterprise Edition. Follow these steps to install MongoDB Enterprise Edition using the apt package manager : Import the public key used by the package management system. From a terminal, issue the following command to import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.4.asc wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - The operation should respond with an OK. However, if you receive an error indicating that gnupg is not installed, you can: Install gnupg and its required libraries using the following command: sudo apt-get install gnupg Once installed, retry importing the key. Create a /etc/apt/sources.list.d/mongodb-enterprise.list file for MongoDB. The following instruction is for Ubuntu 20.04 (Focal): echo \"deb [ arch=amd64,arm64,s390x ] http://repo.mongodb.com/apt/ubuntu focal/mongodb-enterprise/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-enterprise.list The following instruction is for Ubuntu 18.04 (Bionic): echo \"deb [ arch=amd64,arm64,s390x ] http://repo.mongodb.com/apt/ubuntu bionic/mongodb-enterprise/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-enterprise.list Reload local package database. Issue the following command to reload the local package database: sudo apt-get update Install the MongoDB Enterprise packages. Issue the following command: sudo apt-get install -y mongodb-enterprise","title":"Installing MongoDB"},{"location":"#running-mongodb","text":"Follow these steps to run MongoDB Enterprise Edition on your system. To run and manage your mongod process, you will be using your operating system's built-in init system. Start MongoDB You can start the mongod process by issuing the following command: sudo systemctl start mongod Verify that MongoDB has started successfully sudo systemctl status mongod Stop MongoDB sudo systemctl stop mongod Begin using MongoDB Start a mongo shell on the same host machine as the mongod. You can run the mongo shell without any command-line options to connect to a mongod that is running on your localhost with default port 27017: mongo","title":"Running MongoDB"},{"location":"#installing-pymongo","text":"The PyMongo distribution contains tools for interacting with MongoDB database from Python. From a terminal, issue the following command : pip install pymongo This command will install the latest version of pymongo.","title":"Installing Pymongo"},{"location":"code/","text":"Creating database Generating dummy data Generate dummy data of employees at https://www.generatedata.com/ . The following details were used for creating dataset: - Employee ID - Name - Age - Gender - Joining date - Designation/ Job Profile The dataset had 100 entries and it was generated as a json file. Sample json file with 2 entries will look like : [ { \"_id\": 1, \"name\": \"Raven Sawyer\", \"age\": 24, \"gender\": \"M\", \"joining_date\": \"17/09/2010\", \"designation\": \"SD\" }, { \"_id\": 2, \"name\": \"Jordan Shields\", \"age\": 56, \"gender\": \"F \", \"joining_date\": \"04/04/1992\", \"designation\": \"AD\" } ] Generating Database using PyMongo Run the following python script to generate database of employees. Make sure to keep the json file in the same directory as the python script. from pymongo import MongoClient import json client = MongoClient(host=\"localhost\", port=27017) # Initializing employee_data db db = client[\"employee_data\"] final_sample = db.final_sample # Dropping existing collection to avoid appending to the existing collection db.drop_collection(final_sample) # Adding collection to db final_sample = db.final_sample # Opening JSON file (relative path to file) f = open('employee_data.json',) # Returns JSON object as a dictionary data = json.load(f) # Iterating through the json list for i in data: # Adding document to collection result = final_sample.insert_one(i); # Closing file f.close() Verifying creation of Database Run MongoDB on the terminal. You can refer to Running MongoDB . Type the commands given in the following screenshot in your MongoDB shell and you can see the database was successfully created. You can also use MongoDB Compass to check if the database was created.","title":"Database Creation"},{"location":"code/#creating-database","text":"","title":"Creating database"},{"location":"code/#generating-dummy-data","text":"Generate dummy data of employees at https://www.generatedata.com/ . The following details were used for creating dataset: - Employee ID - Name - Age - Gender - Joining date - Designation/ Job Profile The dataset had 100 entries and it was generated as a json file. Sample json file with 2 entries will look like : [ { \"_id\": 1, \"name\": \"Raven Sawyer\", \"age\": 24, \"gender\": \"M\", \"joining_date\": \"17/09/2010\", \"designation\": \"SD\" }, { \"_id\": 2, \"name\": \"Jordan Shields\", \"age\": 56, \"gender\": \"F \", \"joining_date\": \"04/04/1992\", \"designation\": \"AD\" } ]","title":"Generating dummy data"},{"location":"code/#generating-database-using-pymongo","text":"Run the following python script to generate database of employees. Make sure to keep the json file in the same directory as the python script. from pymongo import MongoClient import json client = MongoClient(host=\"localhost\", port=27017) # Initializing employee_data db db = client[\"employee_data\"] final_sample = db.final_sample # Dropping existing collection to avoid appending to the existing collection db.drop_collection(final_sample) # Adding collection to db final_sample = db.final_sample # Opening JSON file (relative path to file) f = open('employee_data.json',) # Returns JSON object as a dictionary data = json.load(f) # Iterating through the json list for i in data: # Adding document to collection result = final_sample.insert_one(i); # Closing file f.close()","title":"Generating Database using PyMongo"},{"location":"code/#verifying-creation-of-database","text":"Run MongoDB on the terminal. You can refer to Running MongoDB . Type the commands given in the following screenshot in your MongoDB shell and you can see the database was successfully created. You can also use MongoDB Compass to check if the database was created.","title":"Verifying creation of Database"},{"location":"commands/","text":"Working with different commands in MongoDB show dbs : displays non-empty databases. use database_name: sets current database. show collections : displays collections in current database. db.collection_name.find().pretty() : displays all documents in the given collection. pretty() is used so that the output is displayed in a clean way. db.collection_name.find({gender : 'M'}).pretty() : displays documents of all male employees. db.collection_name.find().sort({age : 1}).pretty() : documents displayed in ascending order of age. db.collection_name.find({designation : 'I'}).count() : displays count of intern employees. db.collection_name.find().limit(n).pretty() : limits the output to n documents. db.collection_name.update({_id = 100}, {$rename : {designation : 'job_profile'}}) : changes field 'designation' to 'job_profile' for employee with _id = 100. db.collection_name.find({age : {$gt : 55}}).pretty() : displays all employees with age > 55.","title":"Some MongoDB commands"},{"location":"commands/#working-with-different-commands-in-mongodb","text":"show dbs : displays non-empty databases. use database_name: sets current database. show collections : displays collections in current database. db.collection_name.find().pretty() : displays all documents in the given collection. pretty() is used so that the output is displayed in a clean way. db.collection_name.find({gender : 'M'}).pretty() : displays documents of all male employees. db.collection_name.find().sort({age : 1}).pretty() : documents displayed in ascending order of age. db.collection_name.find({designation : 'I'}).count() : displays count of intern employees. db.collection_name.find().limit(n).pretty() : limits the output to n documents. db.collection_name.update({_id = 100}, {$rename : {designation : 'job_profile'}}) : changes field 'designation' to 'job_profile' for employee with _id = 100. db.collection_name.find({age : {$gt : 55}}).pretty() : displays all employees with age > 55.","title":"Working with different commands in MongoDB"},{"location":"references/","text":"References https://docs.mongodb.com/v4.4/tutorial/install-mongodb-enterprise-on-ubuntu/ https://realpython.com/introduction-to-mongodb-and-python/ https://www.generatedata.com/ https://www.youtube.com/watch?v=-56x56UppqQ","title":"References"},{"location":"references/#references","text":"https://docs.mongodb.com/v4.4/tutorial/install-mongodb-enterprise-on-ubuntu/ https://realpython.com/introduction-to-mongodb-and-python/ https://www.generatedata.com/ https://www.youtube.com/watch?v=-56x56UppqQ","title":"References"}]}